{"name": "test_delete_segment", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Requested environment is not available", "trace": "config = {'debug_log': False, 'selenoid': 'http://127.0.0.1:4444/wd/hub', 'url': 'https://target.my.com/'}\n\n    @pytest.fixture(scope='function')\n    def get_driver(config):\n        if config[\"selenoid\"] is not None:\n            capabilities = {\n                \"browserName\": \"chrome\",\n                \"browserVersion\": \"89.0_vnc\",\n                \"selenoid:options\": {\n                    \"enableVNC\": True,\n                    \"enableVideo\": False\n                }\n            }\n            # capabilities = {\n            #     \"browserName\": \"chrome\",\n            #     \"browserVersion\": \"94.0\",\n            #     \"selenoid:options\": {\n            #         \"enableVNC\": True,\n            #         \"enableVideo\": False\n            #     }\n            # }\n>           browser = webdriver.Remote(command_executor=config[\"selenoid\"], desired_capabilities=capabilities)\n\ncapabilities = {'browserName': 'chrome', 'browserVersion': '89.0_vnc', 'selenoid:options': {'enableVNC': True, 'enableVideo': False}}\nconfig     = {'debug_log': False, 'selenoid': 'http://127.0.0.1:4444/wd/hub', 'url': 'https://target.my.com/'}\n\nconftest.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:266: in __init__\n    self.start_session(capabilities, browser_profile)\n        _ignore_local_proxy = False\n        browser_profile = None\n        capabilities = {'browserName': 'chrome', 'browserVersion': '89.0_vnc', 'selenoid:options': {'enableVNC': True, 'enableVideo': False}}\n        command_executor = 'http://127.0.0.1:4444/wd/hub'\n        desired_capabilities = {'browserName': 'chrome', 'browserVersion': '89.0_vnc', 'selenoid:options': {'enableVNC': True, 'enableVideo': False}}\n        file_detector = None\n        keep_alive = True\n        options    = None\n        proxy      = None\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:357: in start_session\n    response = self.execute(Command.NEW_SESSION, parameters)\n        browser_profile = None\n        capabilities = {'browserName': 'chrome', 'browserVersion': '89.0_vnc', 'selenoid:options': {'enableVNC': True, 'enableVideo': False}}\n        parameters = {'capabilities': {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '89.0_vnc', 'selenoid:options': {'enableV...{'browserName': 'chrome', 'browserVersion': '89.0_vnc', 'selenoid:options': {'enableVNC': True, 'enableVideo': False}}}\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\n        w3c_caps   = {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '89.0_vnc', 'selenoid:options': {'enableVNC': True, 'enableVideo': False}}, 'firstMatch': [{}]}\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n        driver_command = 'newSession'\n        params     = {'capabilities': {'alwaysMatch': {'browserName': 'chrome', 'browserVersion': '89.0_vnc', 'selenoid:options': {'enableV...{'browserName': 'chrome', 'browserVersion': '89.0_vnc', 'selenoid:options': {'enableVNC': True, 'enableVideo': False}}}\n        response   = {'status': 400, 'value': '{\"status\":13,\"value\":{\"message\":\"Requested environment is not available\"}}\\n'}\n        self       = <selenium.webdriver.remote.webdriver.WebDriver (session=\"None\")>\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff490288a60>, response = {'status': 400, 'value': '{\"status\":13,\"value\":{\"message\":\"Requested environment is not available\"}}\\n'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: Requested environment is not available\n\nexception_class = <class 'selenium.common.exceptions.WebDriverException'>\njson       = <module 'json' from '/usr/lib/python3.8/json/__init__.py'>\nmessage    = 'Requested environment is not available'\nresponse   = {'status': 400, 'value': '{\"status\":13,\"value\":{\"message\":\"Requested environment is not available\"}}\\n'}\nscreen     = None\nself       = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ff490288a60>\nst_value   = None\nstacktrace = None\nstatus     = 13\nvalue      = {'message': 'Requested environment is not available'}\nvalue_json = '{\"status\":13,\"value\":{\"message\":\"Requested environment is not available\"}}\\n'\n\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/errorhandler.py:243: WebDriverException"}, "start": 1636201493723, "stop": 1636201493723, "uuid": "b9b3186d-97d5-4dbe-850e-58592e1c9969", "historyId": "55ae4b1134d3da2ed4d1521ba023c75b", "testCaseId": "f49607ec2bf69994e876332ee4c1897c", "fullName": "test_hw2.TestCreation#test_delete_segment", "labels": [{"name": "story", "value": "Positive tests"}, {"name": "tag", "value": "UI"}, {"name": "suite", "value": "test_hw2"}, {"name": "subSuite", "value": "TestCreation"}, {"name": "host", "value": "ubuntu"}, {"name": "thread", "value": "55138-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_hw2"}]}